#!/bin/bash

# ============================
# üõ∞Ô∏è CoolPing by Edris Ranjbar
# A friendly ping with emoji
# ============================

# Defaults
PING_COUNT=4
LOG_ENABLED=false
USE_EMOJI=true
USE_COLOR=true
VERBOSE=false

# Emoji-safe fallback
TICK="‚úÖ"
CROSS="‚ùå"
INFO="‚ÑπÔ∏è"
WARN="‚ö†Ô∏è"

# Fallback for terminals with no emoji
if [[ "$TERM" == "dumb" ]] || [[ "$1" == "--no-emoji" ]]; then
  USE_EMOJI=false
  TICK="[OK]"
  CROSS="[FAIL]"
  INFO="[INFO]"
  WARN="[WARN]"
fi

# ANSI Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Disable color if requested
if [[ "$*" == *"--color never"* ]]; then
  USE_COLOR=false
  RED=''
  GREEN=''
  BLUE=''
  YELLOW=''
  NC=''
fi

# Print usage
show_help() {
  echo -e "${BLUE}CoolPing - A stylish ping command with emoji feedback üåê${NC}"
  echo ""
  echo "Usage:"
  echo "  coolping <host> [options]"
  echo ""
  echo "Options:"
  echo "  --count N       Number of packets to send (default: 4)"
  echo "  --log           Enable logging to ~/coolping.log"
  echo "  --no-emoji      Disable emojis"
  echo "  --color never   Disable colored output"
  echo "  --help          Show this help message"
}

# Parse arguments
for arg in "$@"; do
  case $arg in
    --help)
      show_help
      exit 0
      ;;
    --log)
      LOG_ENABLED=true
      shift
      ;;
    --no-emoji)
      USE_EMOJI=false
      TICK="[OK]"
      CROSS="[FAIL]"
      INFO="[INFO]"
      WARN="[WARN]"
      shift
      ;;
    --color)
      if [[ "$2" == "never" ]]; then
        USE_COLOR=false
        RED=''
        GREEN=''
        BLUE=''
        YELLOW=''
        NC=''
      fi
      shift 2
      ;;
    --count)
      PING_COUNT="$2"
      shift 2
      ;;
    --verbose|-v)
      VERBOSE=true
      shift
      ;;
  esac
done

# Target host
HOST="$1"
if [[ -z "$HOST" ]] || [[ "$HOST" == --* ]]; then
  echo -e "${RED}${WARN} No host provided. Run with --help for usage.${NC}"
  exit 1
fi

# Run ping and print results line-by-line
echo -e "${YELLOW}${INFO} Pinging $HOST with $PING_COUNT packets...${NC}"

success_count=0
for ((i=1; i<=PING_COUNT; i++)); do
  # Send a single ping with a 1-second timeout
  if ping_output=$(ping -c 1 -W 1 "$HOST" 2>&1); then
    if [[ "$VERBOSE" == true ]]; then
      echo "$ping_output"
    fi
    # Extract time from successful ping
    rtt=$(echo "$ping_output" | grep -o 'time=[0-9.]*' | cut -d'=' -f2)
    echo -e "${GREEN}${TICK} Reply from $HOST: seq=$i time=${rtt} ms${NC}"
    ((success_count++))
  else
    if [[ "$VERBOSE" == true ]]; then
      echo "$ping_output"
    fi
    echo -e "${RED}${CROSS} No reply from $HOST: seq=$i timeout${NC}"
  fi
  # Optional: sleep for a short duration
  sleep 0.2
done

# Show final summary and helpful tips if all pings failed
if [[ $success_count -eq 0 ]]; then
  echo "" # Newline for spacing
  echo -e "${RED}Oh no! The packets seem to be lost in the digital void... üöÄ${NC}"
  echo -e "${YELLOW}Here are a few things you can try to fix it:${NC}"
  echo "  1. Check your Wi-Fi or network cable."
  echo "  2. Restart your router (the classic 'turn it off and on again')."
  echo "  3. Verify your DNS settings (try 8.8.8.8 or 1.1.1.1)."
  echo "  4. Use 'traceroute $HOST' or 'mtr $HOST' to see where the connection drops."
fi

# Log if needed
if [[ "$LOG_ENABLED" = true ]]; then
  log_status="partially successful"
  if [[ $success_count -eq $PING_COUNT ]]; then
    log_status="successful"
  elif [[ $success_count -eq 0 ]]; then
    log_status="failed"
  fi
  echo "$(date '+%Y-%m-%d %H:%M:%S') - coolping $HOST --count $PING_COUNT - ${log_status}" >> ~/coolping.log
  echo -e "${BLUE}${INFO} Logged to ~/coolping.log${NC}"
fi
